#!usr/bin/env/python3
'''Develop a class to manage car rentals.

Requirements:

Each car should have encapsulated attributes like license_plate, model, daily_rate, and is_available.
Provide methods to:
Rent a car (mark it as unavailable).
Return a car (mark it as available).
Calculate rental charges based on the number of days.
Prevent direct modification of availability or rates.
Bonus Challenge:

Track the total revenue generated by rentals, but do not expose this value directly.'''
class CarRentals:
    def __init__(self,license_plate, model, daily_rate):
        self.__license_plate = license_plate
        self.__model = model
        self.__daily_rate = daily_rate
        self.__is_available = False
    def rent_car(self):
        if self.__is_available:
            self.__is_available = False
            print(f"Car {self.__model}, license Plate: {self.__license_plate} is now rented.")
        else:
            print(f"Car {self.__model}, license Plate: {self.__license_plate} is now available for renting")
    def return_car(self):
        if not self.__is_available:
            self.__is_available = True
            print(f"Car {self.__model}, license Plate: {self.__license_plate} was returned.")
        else:
            print(f"Car {self.__model}, license Plate: {self.__license_plate} was not rented.")
    def rental_charges(self,days):
        if days > 0:
            charges = self.__daily_rate * days
            return charges
        else:
            print("Days cannot be a negative number.")
    def is_car_available(self):
        return self.__is_available
rental = CarRentals("2J3X","Lexus",2500)
rental.rent_car()
print(f"Is car available for rental? {rental.is_car_available()}")
print(f"These are your charges: {rental.rental_charges(12)}")
rental.return_car()
print(f"Is car available for rental? {rental.is_car_available()}")
